import com.android.build.gradle.internal.dsl.ProductFlavor

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-android-extensions"
apply plugin: 'kotlin-kapt'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.sensorsdata.analytics.android'
apply from: 'configs/configpumpkin.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    flavorDimensions "default"

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true
        applicationId gradle.ext.APPLICATION_ID
        versionCode gradle.ext.VERSION_CODE
        versionName gradle.ext.VERSION_NAME
        manifestPlaceholders = gradle.ext.MANIFESTPLACEHOLDERS
        buildConfigField "String", "umeng_key", gradle.ext.UMENG_KEY
        buildConfigField "String", "umeng_name", gradle.ext.UMENG_NAME
        buildConfigField "String", "app_wx_id", gradle.ext.APP_WX_ID
        buildConfigField "String", "app_wx_secret", gradle.ext.APP_WX_SECRET
        buildConfigField "String", "app_qq_id", gradle.ext.APP_QQ_ID
        buildConfigField "String", "app_qq_secret", gradle.ext.APP_QQ_SECRET
        buildConfigField "String", "domain_host", gradle.ext.DOMAIN_HOSTS
        buildConfigField "String[]", "api_host", gradle.ext.API_HOSTS
        buildConfigField "String[]", "api_host_uat", gradle.ext.API_HOSTS_UAT
        buildConfigField "String", "api_key", gradle.ext.API_KEY
        buildConfigField "String", "api_key_uat", gradle.ext.API_KEY_UAT
        buildConfigField "String", "api_secret_key", gradle.ext.API_SECRET_KEY
        buildConfigField "String", "api_secret_key_uat", gradle.ext.API_SECRET_KEY_UAT
        buildConfigField "String", "app_id", gradle.ext.APP_ID
        buildConfigField "boolean", "free_charge", gradle.ext.FREE_CHARGE
        buildConfigField "String", "domain_host_reserve", gradle.ext.DOMAIN_HOSTS_RESERVE
        buildConfigField "String", "picture_key", gradle.ext.PICTURE_KEY
        buildConfigField "String", "picture_vipara", gradle.ext.PICTURE_VIPARA
        buildConfigField "String", "api_decode_iv_uat", gradle.ext.API_DECODE_IV_UAT
        buildConfigField "String", "api_decode_key_uat", gradle.ext.API_DECODE_KEY_UAT
        buildConfigField "String", "api_decode_iv", gradle.ext.API_DECODE_IV
        buildConfigField "String", "api_decode_key", gradle.ext.API_DECODE_KEY
        buildConfigField "String", "app_source_boyin", gradle.ext.APP_SOURCE_BOYIN
        buildConfigField "String", "ad_appkey_uat", gradle.ext.AD_APPKEY_UAT
        buildConfigField "String", "ad_secret_uat", gradle.ext.AD_SECRET_UAT
        buildConfigField "String", "ad_appkey", gradle.ext.AD_APPKEY
        buildConfigField "String", "ad_secret", gradle.ext.AD_SECRET
        buildConfigField "String", "sa_server_url", gradle.ext.SA_SERVER_URL
        buildConfigField "String", "sa_server_url_uat", gradle.ext.SA_SERVER_URL_UAT
        buildConfigField "String", "sa_server_app_id", gradle.ext.SA_SERVER_APP_ID
        resValue "string", "tray__authority", gradle.ext.APPLICATION_ID + ".tray"

        ndk {
            //选择要添加的对应cpu类型的.so库。为了兼容cpu，查看官网SDK的libs多添加几个
            abiFilters 'arm64-v8a', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'x86', 'x86_64'
        }

    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        debug {
            storeFile file('configs/sign/debug.jks')
            storePassword "debug123"
            keyAlias "debug"
            keyPassword "debug123"
        }

        release {
            keyAlias
            keyPassword
            storeFile
            storePassword
        }

        heiheilianzaiRelease { // 嘿嘿连载
            getProductConfig(heiheilianzai)
            keyAlias gradle.ext.KEY_ALIAS
            keyPassword gradle.ext.STORE_PASSWORD
            storeFile file(gradle.ext.STORE_FILE)
            storePassword gradle.ext.KEY_PASSWORD
        }

        pumpkinRelease { // 南瓜阅读
            getProductConfig(pumpkin)
            keyAlias gradle.ext.KEY_ALIAS
            keyPassword gradle.ext.STORE_PASSWORD
            storeFile file(gradle.ext.STORE_FILE)
            storePassword gradle.ext.KEY_PASSWORD
        }
    }

    getSigningProperties()

    productFlavors {
        // 嘿嘿连载
        heiheilianzai getProductConfig(heiheilianzai)
        getSigningConfig(heiheilianzai)
        //南瓜阅读
        pumpkin getProductConfig(pumpkin)
        getSigningConfig(pumpkin)
    }

    buildTypes {
        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        release {
            getAppConfig()
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def apkName = variant.flavorName
            def versionStr = "_${variant.versionCode}" + "_v${variant.versionName}"
            if (variant.flavorName.isEmpty()) {
                apkName += "App"
            }
            if (variant.buildType.name == 'release') {
                outputFileName = apkName + "_${releaseTime()}" + versionStr + "_Release.apk"
            } else {
                outputFileName = apkName + "_${releaseTime()}" + versionStr + "_Debug.apk"
            }
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    configurations {
        all*.exclude group: 'com.android.support', module: 'support-v13'
    }
}

static def releaseTime() {
    return new Date().format("yyyy_MM_dd_HH-mm", TimeZone.getTimeZone("GMT+8"))
}
/**
 * 重置App配置
 * @return
 */
def getAppConfig() {
    return {
        applicationId gradle.ext.APPLICATION_ID
        versionCode gradle.ext.VERSION_CODE
        versionName gradle.ext.VERSION_NAME
        manifestPlaceholders = gradle.ext.MANIFESTPLACEHOLDERS
        buildConfigField "String", "umeng_key", gradle.ext.UMENG_KEY
        buildConfigField "String", "umeng_name", gradle.ext.UMENG_NAME
        buildConfigField "String", "app_wx_id", gradle.ext.APP_WX_ID
        buildConfigField "String", "app_wx_secret", gradle.ext.APP_WX_SECRET
        buildConfigField "String", "app_qq_id", gradle.ext.APP_QQ_ID
        buildConfigField "String", "app_qq_secret", gradle.ext.APP_QQ_SECRET
        buildConfigField "String", "domain_host", gradle.ext.DOMAIN_HOSTS
        buildConfigField "String[]", "api_host", gradle.ext.API_HOSTS
        buildConfigField "String[]", "api_host_uat", gradle.ext.API_HOSTS_UAT
        buildConfigField "String", "api_key", gradle.ext.API_KEY
        buildConfigField "String", "api_key_uat", gradle.ext.API_KEY_UAT
        buildConfigField "String", "api_secret_key", gradle.ext.API_SECRET_KEY
        buildConfigField "String", "api_secret_key_uat", gradle.ext.API_SECRET_KEY_UAT
        buildConfigField "String", "app_id", gradle.ext.APP_ID
        buildConfigField "Boolean", "free_charge", gradle.ext.FREE_CHARGE
        buildConfigField "String", "domain_host_reserve", gradle.ext.DOMAIN_HOSTS_RESERVE
        buildConfigField "String", "picture_key", gradle.ext.PICTURE_KEY
        buildConfigField "String", "picture_vipara", gradle.ext.PICTURE_VIPARA
        buildConfigField "String", "api_decode_iv_uat", gradle.ext.API_DECODE_IV_UAT
        buildConfigField "String", "api_decode_key_uat", gradle.ext.API_DECODE_KEY_UAT
        buildConfigField "String", "api_decode_iv", gradle.ext.API_DECODE_IV
        buildConfigField "String", "api_decode_key", gradle.ext.API_DECODE_KEY
        buildConfigField "String", "app_source_boyin", gradle.ext.APP_SOURCE_BOYIN
        buildConfigField "String", "ad_appkey_uat", gradle.ext.AD_APPKEY_UAT
        buildConfigField "String", "ad_secret_uat", gradle.ext.AD_SECRET_UAT
        buildConfigField "String", "ad_appkey", gradle.ext.AD_APPKEY
        buildConfigField "String", "ad_secret", gradle.ext.AD_SECRET
        buildConfigField "String", "sa_server_url", gradle.ext.SA_SERVER_URL
        buildConfigField "String", "sa_server_url_uat", gradle.ext.SA_SERVER_URL_UAT
        buildConfigField "String", "sa_server_app_id", gradle.ext.SA_SERVER_APP_ID
        resValue "string", "tray__authority", gradle.ext.APPLICATION_ID + ".tray"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.legacy:legacy-support-v4:${rootProject.xLegacy}"
    implementation "junit:junit:${rootProject.junit}"
    implementation "androidx.cardview:cardview:${rootProject.xCardview}"
    implementation "androidx.recyclerview:recyclerview:${rootProject.xRecycleview}"
    implementation "androidx.coordinatorlayout:coordinatorlayout:${rootProject.xRecycleview}"
    implementation "com.google.android.material:material:${rootProject.material}"
    implementation "androidx.appcompat:appcompat:${rootProject.xAppcompat}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"


    // ==================================第三方SDK==================================
    // 微信支付
    implementation "com.tencent.mm.opensdk:wechat-sdk-android-without-mta:${rootProject.wechat}"
    // 腾讯bug统计
    implementation files('libs/bugly_crash_release.jar')
    // 支付宝支付
    implementation files('libs/alipaySdk-20170725.jar')
    // 阿里云推送
    implementation "com.aliyun.ams:alicloud-android-push:${rootProject.alicloud}"
    // 友盟系列
    implementation "com.umeng.umsdk:analytics:${rootProject.umeng_analytics}"
    implementation "com.umeng.umsdk:common:${rootProject.umeng_common}"
    implementation "com.umeng.umsdk:crash:${rootProject.umeng_crash}"
    implementation files('libs/umeng-share-core-6.9.8.jar')
    implementation files('libs/umeng-share-QQ-simplify-6.9.8.jar')
    implementation files('libs/umeng-share-wechat-simplify-6.9.8.jar')
    implementation files('libs/umeng-sharetool-6.9.8.jar')
    // --- 极光
    implementation "cn.jiguang.sdk:jpush:${rootProject.jiguang_jpush}"  // 此处以JPush 3.3.2 版本为例。
    implementation "cn.jiguang.sdk:jcore:${rootProject.jiguang_jcore}"  // 此处以JCore 2.1.0 版本为例。
    implementation "cn.jiguang.sdk:jmessage:${rootProject.jiguang_jmessage}"
    // 此处以JMessage 2.9.0 版本为例。
    implementation "cn.jiguang.sdk.plugin:xiaomi:${rootProject.jiguang_plugin}"
// 此版本插件仅支持JPushSDK3.3.2及以上
    implementation "cn.jiguang.sdk.plugin:meizu:${rootProject.jiguang_plugin}"
// 此版本插件仅支持JPushSDK3.3.2及以上版本
    implementation "cn.jiguang.sdk.plugin:oppo:${rootProject.jiguang_plugin}"
    implementation "com.google.firebase:firebase-messaging:${rootProject.firebase_messaging}"

    // ==================================广告SDK要求依赖==================================
    implementation("com.squareup.retrofit2:retrofit:${rootProject.retrofit}") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    implementation("com.lzy.net:okgo:${rootProject.okgo}") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    implementation "com.lzy.net:okserver:${rootProject.okserver}"
    implementation "com.google.code.gson:gson:${rootProject.gson}"
    implementation "cn.jzvd:jiaozivideoplayer:${rootProject.jiaozivideoplayer}"
    implementation "com.danikula:videocache:${rootProject.videocache}"
    implementation name: 'XAD_comm_1001009_release', ext: 'aar'

    // ==================================UI==================================
    // 进度条
    implementation "com.crystal:crystalrangeseekbar:${rootProject.crystalrangeseekbar}"
    // 滑动开关
    implementation "com.zcw:togglebutton-library:${rootProject.togglebutton_library}"
    // 处理各种版本沉侵状态栏
    implementation "com.jaeger.statusbaruitl:library:${rootProject.statusbaruitl}"
    // 处理各种机型改变状态栏文字颜色
    implementation "com.githang:status-bar-compat:${rootProject.status_bar_compat}"
    // recyclerview 添加头部底部轻量级
    implementation "com.songhang:smart-headerfooter-recyclerview:${rootProject.smart_headerfooter_recyclerview}"
    implementation project(':extras:shswiperefresh')
    implementation "com.jcodecraeer:xrecyclerview:${rootProject.xrecyclerview}"
    // 有加载进度的ImageViewer
    implementation "com.github.piasy:BigImageViewer:${rootProject.bigImage}"
    implementation("com.github.piasy:GlideImageLoader:${rootProject.bigImage}") { exclude group: 'com.squareup.okhttp3', module: 'okhttp' }
    implementation "com.github.piasy:ProgressPieIndicator:${rootProject.bigImage}"
    implementation "com.github.piasy:GlideImageViewFactory:${rootProject.bigImage}"
    // 二维码
    implementation "com.google.zxing:core:${rootProject.zxing}"
    // 悬浮按钮
    implementation "com.zhengjt:floatingball:${rootProject.floatingball}"
    // 新手引导层
    implementation "com.github.huburt-Hu:NewbieGuide:${rootProject.newbieGuide}"
    //圆角图片
    implementation project(':extras:niceimageview')

    // ==================================工具==================================
    //  butterknife 注解
    implementation "com.jakewharton:butterknife:${rootProject.butterknife}"
    kapt "com.jakewharton:butterknife-compiler:${rootProject.butterknife}"
    // 数据库
    implementation "org.litepal.android:java:${rootProject.litepal}"
    // 本地偏好存储
    implementation "net.grandcentrix.tray:tray:${rootProject.grandcentrix}"
    // 组件通信工具
    implementation "org.greenrobot:eventbus:${rootProject.eventbus}"
    // 权限管理
    implementation "com.github.dfqin:grantor:${rootProject.dfqin}"
    // 处理编码
    implementation files('libs/juniversalchardet-2.3.0.jar')
    // commons-codec
    implementation "commons-codec:commons-codec:${rootProject.commons_codec}"
    // OK网络库
    implementation "com.squareup.okhttp3:okhttp:${rootProject.okhttp}"
    // Glide图片加载
    implementation "com.github.bumptech.glide:glide:${rootProject.glide}"
    kapt "com.github.bumptech.glide:compiler:${rootProject.glide}"
    implementation "jp.wasabeef:glide-transformations:${rootProject.glide_transformations}"
    implementation "com.zlc.glide:webpdecoder:${rootProject.webpdecoder}"
    // ---
    // 图片压缩  拍摄头像后压缩 在上传服务端
    implementation "top.zibin:Luban:${rootProject.zibin}"
    // 网络请求loading
    implementation "com.wang.avi:library:${rootProject.avloading}"
    // FastJson 解析json
    implementation "com.alibaba:fastjson:${rootProject.fastjson}"
    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:${rootProject.rxjava}"
    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.rxandroid}"
    // 添加 Sensors Analytics SDK 依赖
    implementation "com.sensorsdata.analytics.android:SensorsAnalyticsSDK:${rootProject.SensorsAnalyticsSDK}"
    // 下载库
    implementation "com.liulishuo.filedownloader:library:${rootProject.liulishuo}"

    // 协程库
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${rootProject.kotlinx_coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${rootProject.kotlinx_coroutines}"
    implementation "com.github.liangjingkanji:BRV:${rootProject.BRV}"
    implementation "com.github.liangjingkanji:Net:${rootProject.net}"
    implementation "com.github.liangjingkanji:LogCat:${rootProject.LogCat}"
    //快速查找
    implementation "com.github.Othershe:GroupIndexLib:${rootProject.GroupIndexLib}"
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'
}

/**
 * 根据Flavor 配置签名文件 多渠道多签名时使用
 * @param productFlavors
 * @return
 */
ProductFlavor getSigningConfig(ProductFlavor productFlavors) {
    print(productFlavors.name.toLowerCase())
    switch (productFlavors.name) {
        case heiheilianzai.toLowerCase(): // 嘿嘿连载
            productFlavors.signingConfig android.signingConfigs.heiheilianzaiRelease
            break
        case pumpkin.toLowerCase(): // 南瓜阅读
            productFlavors.signingConfig android.signingConfigs.pumpkinRelease
            break
        default:
            productFlavors.signingConfig android.signingConfigs.pumpkinRelease
            break
    }
    return productFlavors
}

/**
 * 根据flavor获取配置文件
 * @param flavorName
 * @return
 */
def getProductConfig(String flavorName) {
    apply from: "configs/config" + flavorName + ".gradle"
    getSigningProperties()
    return getAppConfig()
}

/**
 * 获取默认签名
 * @return
 */
def getSigningProperties() {
    android.signingConfigs.release.storeFile = file(gradle.ext.STORE_FILE)
    android.signingConfigs.release.storePassword = gradle.ext.STORE_PASSWORD
    android.signingConfigs.release.keyAlias = gradle.ext.KEY_ALIAS
    android.signingConfigs.release.keyPassword = gradle.ext.KEY_PASSWORD
}

String SDK_DIR = System.getenv("ANDROID_SDK_HOME")
if (SDK_DIR == null) {
    Properties props = new Properties()
    props.load(new FileInputStream(project.rootProject.file("local.properties")))
    SDK_DIR = props.get('sdk.dir')
}

dependencies {

    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    compileOnly files("${SDK_DIR}/platforms/android-20/data/layoutlib.jar")
}
repositories {
    mavenCentral()
}